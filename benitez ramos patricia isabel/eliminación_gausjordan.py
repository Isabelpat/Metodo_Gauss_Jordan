# -*- coding: utf-8 -*-
"""Eliminación_Gausjordan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17okkXFQI4lK8UJ4Yk8EeDVPkRTdYbvBP

#Modelo de eliminación por Gauss Jordan
**Alumna:Patricia Isabel Benitez Ramos**
"""

#Instalamos las bibliotecas que usaremos
import numpy as np
import pandas as pd
import sympy as sym

"""Es un codigo que intente hacer de forma que resolviera cualquier tamaño de matriz, documente el paso a paso para entender que hice, basandome en lo que vimos en clase y la información que tenemos disponible."""

# creando la funcion para que podamos ingresar la matriz

def mostrar_matriz(m, paso_desc):

#este print mostrara la matriz
    print(f"\n {paso_desc}")
    display(pd.DataFrame(np.round(m, 4)))
#desde este punto comenzamos con el metodo de Gauss Jordan
#recordando que se resuelve por su matriz aumentada.
def gauss_jordan(matriz):

#Parámetro y array de tamaño (n, n+1), matriz aumentada del sistema Ax = b
#puse float porque no son enteros cuando se calcula
    A = matriz.astype(float)
    filas, columnas = A.shape
    n = filas
#para poder entender deje un titulo de que se esta haciendo para cuando se imprima el resultado
    mostrar_matriz(A, "Paso 0: Matriz aumentada inicial")

    for i in range(n):
        print(f"\nPaso {i+1}.1: Normalizar el pivote en fila {i+1}")

# buscar un pivote no cero (posible intercambio de filas), si no se encuentra imprimimos que no se intercambio fila, o si no se puede normalizar
        if np.isclose(A[i, i], 0):
            intercambio = False
            for j in range(i+1, n):
                if not np.isclose(A[j, i], 0):
                    print(f"Intercambiamos fila {i+1} con fila {j+1} porque el pivote era 0")
                    A[[i, j]] = A[[j, i]]
                    intercambio = True
                    break
            if not intercambio:
                print(f"No se encontró pivote no cero en la columna {i+1}, continuamos...")

        pivote = A[i, i]
        if np.isclose(pivote, 0):
            print(f"Pivote en fila {i+1} sigue siendo cero, no se puede normalizar esta fila.")
            continue

        # normaliza filas
        A[i] = A[i] / pivote
        mostrar_matriz(A, f"Fila {i+1} normalizada (pivote = 1)")

        print(f"\nPaso {i+1}.2: Eliminar los demás elementos de la columna {i+1}")
        for j in range(n):
            if j != i:
                factor = A[j, i]
                A[j] = A[j] - factor * A[i]
                print(f"→ Se resta {factor:.4f} * fila {i+1} a fila {j+1}")
        mostrar_matriz(A, f"Columna {i+1} convertida en ceros (excepto el pivote)")

    # análisis de soluciones para imprimir si tiene soluciones, si tiene infinitas soluciones, si tiene unica solucion
    print("\n Análisis de soluciones del sistema:")

    # Rango de la matriz coeficiente y de la matriz aumentada
    matriz_coef = A[:, :-1]
    matriz_aumentada = A

    rango_coef = np.linalg.matrix_rank(matriz_coef)
    rango_aug = np.linalg.matrix_rank(matriz_aumentada)

    if rango_coef < rango_aug:
        print(" El sistema NO tiene solución (inconsistente).")
        return
    elif rango_coef < n:
        print(" El sistema tiene infinitas soluciones.")
        # No se imprimen soluciones numéricas únicas
        return
    else:
        print(" El sistema tiene solución única:")
        # Imprimir solución
        for i in range(n):
            print(f"x{i+1} = {A[i, -1]:.6f}")
#aqui imprimo matriz final ya normalizada es decir ceros arriba abajo y loa digonal de 1
    print("\nPaso final: Matriz reducida por filas (forma escalonada reducida)")
    mostrar_matriz(A, "Matriz final")

# ----------- aqui puedo meter cualquier ecuación  -----------

matriz_aumentada = np.array([
    [1, 2, 3, 14],
    [2, 1, 1, 9],
    [-1, 1, 2, 2]
])
#imprime
gauss_jordan(matriz_aumentada)